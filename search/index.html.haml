---
layout: project-frame
title: Hibernate Search
project: search
title_partial: project/title-about.html.haml
---

-# Center body
.row-fluid
  .span8
    .row-fluid
      .span12.feature-block
        :asciidoc
          === Full-text search for entities

          Offers full-text search support for objects stored by Hibernate ORM, Infinispan and other sources.
          Think of it as Google(tm) for your entities:

          * search words with text
          * order results by relevance
          * find by approximation (fuzzy search)

          Under the hood it will use link:https://lucene.apache.org/core/[Apache Lucene], directly or over link:https://www.elastic.co/products/elasticsearch/[Elasticsearch].
    .row-fluid
      .span12.feature-block
        :asciidoc
          === Full control

          Unlike with Google, this is your data, your domain, your application, stored wherever you decide.
          You also have far better control on how your data is processed, and how to extract what you need.

          Hibernate Search exposes all capabilities of the Apache Lucene analysis framework, so you can:

          * tune text processing for specific languages
          * for domain specific text (e.g. medical terms, expand your own acronyms,..)
          * control the ranking process: which results are more important

          Additionally it can:
          * partition data, multi-tenancy for security or performance optimisations
          * declarative filtering, to control data access security via aspect based programming
    .row-fluid
      .span12.feature-block
        :asciidoc
          === Scalable, Fault Tolerant, Cloud Friendly

          You'll find that performance of a "single box" is exceptional, still it can be distributed.

          Maintaining an high performance, scalable distributed index is not simple. Hibernate Search offers choices on architectural solutions:
          * Integration with link:https://www.elastic.co/products/elasticsearch/[Elasticsearch]
          * Store the Apache Lucene index in an link:http://infinispan.org/[Infinispan distributed data grid]
          * Simple filesystem based replication
          * Replicate changes across nodes using JMS, JGroups, or plug your own service
          * Update indexes within a JTA transaction, or as a post-transaction listener

          These building blocks can be combined in various ways.
    .row-fluid
      .span12.feature-block
        :asciidoc
          === Spatial queries

          Geolocalized entities are as easy as `@Spatial`. Filter results around a certain location like the user position, and just highlight the matching pizzeria's which are actually close to the user.
    .row-fluid
      .span12.feature-block
        :asciidoc
          === Faceting

          Easily organize your results by groups and categories, having these automatically discovered from your data.
          
          Faceting categorizes results by properties like price range or brand.
    .row-fluid
      .span12.feature-block
        :asciidoc
          === Easy to use

          Designed to be easy to use from the ground up. Handles indexing, datastore synchronization, clustering and infrastructure transparently while you focus on the business side of your queries.

  -# News right column
  .span4
    = partial( 'common/latest-news.html.haml', {"real_page" => page} )
